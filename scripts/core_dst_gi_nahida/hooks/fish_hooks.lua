---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2025/4/22 22:19
---

--------------------------------------老杨写---------------------------------------------------

--modimport("scripts/ych_spellbook")

-- 初始化钓鱼开始时的状态
local function TrackFishingStart(self)
    self.fishing_stats = {
        bobber = "oceanfishingbobber_malbatross",
        lure = "oceanfishinglure_hermit_drowsy",
        cast_time = GetTime(),
    }
end

-- 定义钓鱼相关的参数
local casting_data = TUNING.OCEANFISHING_TACKLE.BOBBER_MALBATROSS
local lure_data = {
    charm = 0.8,
    reel_charm = 0.8,
    radius = 8.0,
    style = TUNING.MOD_ID,
    timeofday = {day = 1, dusk = 1, night = 1},
    dist_max = 2,
    stamina_drain = 1.0,
    weather = {default = 1.0, raining = 1.0, snowing = 1.0}
}

-- 修改 oceanfishingrod 组件
AddComponentPostInit("oceanfishingrod", function (self)
    local Cast = self.Cast
    local _CacheTackleData = self._CacheTackleData
    local ondonefishing = self.ondonefishing

    -- 缓存钓具数据
    function self:_CacheTackleData(bobber, lure, ...)
        if self._dst_gi_nahida_fisher then
            local bobber_data = casting_data

            for k, _ in pairs(self.casting_base) do
                self.casting_data[k] = math.max(0, self.casting_base[k] + (bobber_data ~= nil and bobber_data[k] or 0) + (lure_data ~= nil and lure_data[k] or 0))
            end

            self.projectile_prefab = self.default_projectile_prefab
            self.lure_data = lure_data
            self.lure_setup = self.default_lure_setup
        else
            return _CacheTackleData(self, bobber, lure, ...)
        end
    end

    -- 执行钓鱼动作
    function self:Cast(fisher, targetpos, ...)
        if fisher ~= nil and fisher.prefab == TUNING.MOD_ID then
            local tackle = self.gettackledatafn(self.inst)
            self._dst_gi_nahida_fisher = true
            self:_CacheTackleData(tackle.bobber, tackle.lure)

            TrackFishingStart(self)

            targetpos = self:_CalcCastDest(self.inst:GetPosition(), targetpos)
            self.fisher = fisher
            self:SetTarget(self:_LaunchCastingProjectile(fisher, targetpos, self.projectile_prefab))
            if self.target ~= nil and self.lure_setup ~= nil and self.lure_setup.build ~= nil and self.lure_setup.symbol ~= nil then
                self.target.AnimState:OverrideSymbol("lure", self.lure_setup.build, self.lure_setup.symbol)
            end

            self.inst:StartUpdatingComponent(self)

            if self.oncastfn ~= nil then
                self.oncastfn(self.inst, fisher, self.target)
            end

            self._dst_gi_nahida_fisher = nil
            return self.target ~= nil
        else
            return Cast(self, fisher, targetpos, ...)
        end
    end

    local Reel = self.Reel
    -- 执行收线动作
    function self:Reel(...)
        if fisher ~= nil and fisher.prefab == TUNING.MOD_ID then
            if self.target ~= nil and self.target.components.oceanfishable ~= nil and self.fisher and self.fisher:IsValid() then
                local dir = self.fisher:GetPosition() - self.target:GetPosition()
                local len = dir:Length()

                self.target.components.oceanfishable:OnReelingIn(self.fisher)

                local was_high_tension = self:IsLineTensionHigh()
                if self.line_dist ~= nil then
                    local reel_in_dist = self.target.components.locomotor ~= nil and (self.reeling_line_dist * (1 - self.line_tension)) or self.reeling_line_dist
                    self.line_dist = math.max(0, self.line_dist - reel_in_dist)
                    self:UpdateTensionRating()
                end

                local target = self.target

                if target ~= nil then
                    target.components.oceanfishable:OnReelingInPst(self.fisher)
                end

                return true
            end
        else
            return Reel(self, ...)
        end
    end
end)

-- 鱼咬钩时的处理函数
local function DoNibble(inst)
    local fishingrod = inst.components.fishingrod
    if fishingrod and fishingrod.fisherman then
        inst:PushEvent("fishingnibble")
        fishingrod.fisherman:PushEvent("fishingnibble")
        fishingrod.fishtask = nil
    end
end

-- 修改 fishingrod 组件
AddComponentPostInit("fishingrod", function (self)
    local WaitForFish = self.WaitForFish
    local oldwaittimes = {self.minwaittime, self.maxwaittime}

    -- 等待鱼上钩
    function self:WaitForFish(...)
        local owner = self.inst.components.inventoryitem ~= nil and self.inst.components.inventoryitem:GetGrandOwner() or nil
        if owner ~= nil and owner.prefab == TUNING.MOD_ID then
            self:SetWaitTimes(3, 3)
            if self.target and self.target.components.fishable then
                local fishleft = self.target.components.fishable:GetFishPercent()
                local nibbletime = nil
                if fishleft > 0 then
                    nibbletime = 3
                end
                self:CancelFishTask()
                if nibbletime then
                    self.fishtask = self.inst:DoTaskInTime(nibbletime, DoNibble)
                end
            end
        else
            self:SetWaitTimes(oldwaittimes[1], oldwaittimes[2])
            return WaitForFish(self, ...)
        end
    end
end)

-- 鱼群生成相关参数
local MAX_CHUM_PIECES = 7
local FISH_SPAWN_DELAY = 2.5
local FISH_SPAWN_DELAY_VARIANCE = 2.5
local FISH_SPAWN_MAX_OFFSET = 8
local EXTRA_MAX_FISH_ALLOWED = 10
local FISHABLE_TAGS = {"oceanfish", "oceanfishable"}

-- 本模组角色吸引鱼群的参数
local ATTRACTION_RADIUS = 15  -- 吸引鱼群的范围
local MAX_FISH_IN_ATTRACTION_RADIUS = 6  -- 吸引范围内最大鱼群数量
local FISH_SPAWN_COOLDOWN = 60  -- 鱼群生成冷却时间（秒）

-- 生成鱼群（只针对本模组角色的吸引效果）
local function SpawnFishSchool(inst)
    -- 检查冷却时间
    if inst._last_fish_spawn_time and GetTime() - inst._last_fish_spawn_time < FISH_SPAWN_COOLDOWN then
        return
    end

    local x, y, z = inst.Transform:GetWorldPosition()

    -- 检查附近是否有本模组角色
    local nearby_nahida_players = TheSim:FindEntities(x, y, z, ATTRACTION_RADIUS, {TUNING.AVATAR_NAME})
    if #nearby_nahida_players == 0 then
        return  -- 没有本模组角色，不生成鱼群
    end

    -- 只检查吸引范围内的鱼群数量
    local nearby_fish = TheSim:FindEntities(x, y, z, ATTRACTION_RADIUS, FISHABLE_TAGS)
    local num_nearby_fish = #nearby_fish

    -- 如果吸引范围内的鱼群数量已经足够，就不再生成
    if num_nearby_fish >= MAX_FISH_IN_ATTRACTION_RADIUS then
        return
    end

    -- 检查更大范围内的总鱼群数量（防止过度生成）
    local total_fish = #TheSim:FindEntities(x, y, z, TUNING.SCHOOL_SPAWNER_FISH_CHECK_RADIUS, FISHABLE_TAGS)
    if total_fish >= TUNING.SCHOOL_SPAWNER_MAX_FISH + EXTRA_MAX_FISH_ALLOWED then
        return
    end

    -- 生成鱼群
    local theta = math.random() * TWOPI
    local pos = FindSwimmableOffset(Vector3(x, y, z), theta, 6, 12, nil, nil, nil, true)
    if pos ~= nil then
        pos = pos + Vector3(x, y, z)
        if TUNING.MOD_DST_GI_NAHIDA.ENABLED_MOD.SHIPWRECKED then
            -- 开了海岛，不生鱼群
        else
            local spawn_offset = Vector3(math.cos(theta) * FISH_SPAWN_MAX_OFFSET, 0, math.sin(theta) * FISH_SPAWN_MAX_OFFSET)
            local num_fish_spawned = TheWorld.components.schoolspawner:SpawnSchool(Vector3(pos.x, pos.y, pos.z), nil, spawn_offset)

            -- 记录生成时间
            if num_fish_spawned and num_fish_spawned > 0 then
                inst._last_fish_spawn_time = GetTime()
            end
        end
    end
end

-- 鱼饵被移除时的处理函数
local function OnPieceRemoved(piece)
    local chum_aoe = piece._source
    if chum_aoe ~= nil then
        chum_aoe._chumpieces[piece] = nil
        chum_aoe._num_chumpieces = chum_aoe._num_chumpieces - 1

        if chum_aoe.persists then
            chum_aoe:_spawn_chum_piece_fn()
        end
    end
end

-- 生成鱼饵
local function SpawnChumPieces(inst)
    if inst._num_chumpieces < MAX_CHUM_PIECES then
        local x, y, z = inst.Transform:GetWorldPosition()
        local theta = math.random() * TWOPI
        local offset = math.random() * 4 + 2
        local spawnx, spawnz = x + math.cos(theta) * offset, z + math.sin(theta) * offset
        if TheWorld.Map:IsOceanAtPoint(spawnx, 0, spawnz, false) then
            local piece = SpawnPrefab("chumpiece")

            piece.Transform:SetPosition(spawnx, 0, spawnz)
            piece._source = inst
            inst._chumpieces[piece] = true
            inst._num_chumpieces = inst._num_chumpieces + 1

            piece:ListenForEvent("onremove", OnPieceRemoved)
        end
    end
end

-- 初始化 prefab（修改版本）
AddPrefabPostInit(TUNING.MOD_ID, function (inst)
    inst:AddTag("chum")
    if TheWorld.ismastersim then
        inst._num_chumpieces = 0
        inst._spawn_chum_piece_fn = SpawnChumPieces
        inst._chumpieces = {}
        inst._last_fish_spawn_time = 0  -- 添加时间记录

        -- 修改生成频率，增加随机性
        local spawn_delay = FISH_SPAWN_DELAY + math.random() * FISH_SPAWN_DELAY_VARIANCE
        inst._spawn_fish_school_task = inst:DoPeriodicTask(spawn_delay, SpawnFishSchool)
        --inst:DoPeriodicTask(.25, SpawnChumPieces)
    end
end)

-- 修改 oceanfishable 组件
AddComponentPostInit("oceanfishable", function (self)
    local IsCloseEnoughToCatch = self.IsCloseEnoughToCatch
    -- 判断是否足够接近以捕捉
    function self:IsCloseEnoughToCatch(...)
        local owner = self.rod.components.inventoryitem and self.rod.components.inventoryitem:GetGrandOwner() or self.rod
        if owner ~= nil and owner.prefab == TUNING.MOD_ID then
            return true
        else
            return IsCloseEnoughToCatch(self ,...)
        end
    end
end)